//package com.uchain.vm;////import com.google.common.collect.Maps;//import com.uchain.core.Account;//import com.uchain.crypto.Fixed8;//import com.uchain.crypto.HashUtil;//import com.uchain.crypto.UInt256;//import com.uchain.vm.program.Program;//import com.uchain.vm.program.invoke.ProgramInvokeMockImpl;//import org.junit.FixMethodOrder;//import org.junit.Ignore;//import org.junit.Test;//import org.junit.runners.MethodSorters;//import org.slf4j.Logger;//import org.slf4j.LoggerFactory;//import org.spongycastle.util.encoders.Hex;////import java.math.BigInteger;//import java.util.Arrays;//import java.util.Map;////@FixMethodOrder(MethodSorters.NAME_ASCENDING)//public class VMComplexTest {//    private static Logger logger = LoggerFactory.getLogger("TCK-Test");////    @Ignore//    @Test // 递归调用合约//    public void test1() {//        /**//         *       #The code will run//         *       ------------------////         a = contract.storage[999]//         if a > 0://             contract.storage[999] = a - 1////             # call to contract: 77045e71a7a2c50903d88e564cd72fab11e82051//             send((tx.gas / 10 * 8), 0x77045e71a7a2c50903d88e564cd72fab11e82051, 0)//         else://            stop//         */////        int expectedGas = 436;////        DataWord key1 = DataWord.of(999);//        DataWord value1 = DataWord.of(3);////        String callerAddr = "cd2a3d9f938e13cd947ec05abc7fe734df8dd826";//        String contractAddr = "77045e71a7a2c50903d88e564cd72fab11e82051";//        String code = "6103e75460005260006000511115630000004c576001600051036103e755600060006000600060007377045e71a7a2c50903d88e564cd72fab11e820516008600a5a0402f1630000004c00565b00";////        byte[] contractAddrB = Hex.decode(contractAddr);//        byte[] callerAddrB = Hex.decode(callerAddr);//        byte[] codeB = Hex.decode(code);////        byte[] codeKey = HashUtil.sha3(codeB);//        Map<UInt256, Fixed8> frombalances = Maps.newHashMap();//        Account accountState = new Account(frombalances).withCodeHash(codeKey);////        ProgramInvokeMockImpl pi = new ProgramInvokeMockImpl();//        pi.setOwnerAddress(contractAddrB);//        Repository repository = pi.getRepository();////        repository.createAccount(callerAddrB);////        byte[] arr = new byte[32];//        Arrays.fill(arr,(byte)1);//        UInt256 assetID = new UInt256(arr);////        repository.addBalance(callerAddrB, assetID,new BigInteger("1000000000000000000"));////        repository.createAccount(contractAddrB);//        repository.saveCode(contractAddrB, codeB);//        repository.addStorageRow(contractAddrB, key1, value1);////        VM vm = new VM();//        Program program = new Program(codeB, pi);////        try {//            while (!program.isStopped())//                vm.step(program);//        } catch (RuntimeException e) {//            e.printStackTrace();//            program.setRuntimeFailure(e);//        }////        System.out.println();//        System.out.println("============ Results ============");////        BigInteger balance = repository.getBalance(callerAddrB);////        System.out.println("*** Used gas: " + program.getResult().getGasUsed());//        System.out.println("*** Contract Balance: " + balance);////        // todo: assert caller balance after contract exec////        repository.close();////        assertEquals(expectedGas, program.getResult().getGasUsed());//    }////    @Test // CREATE magic//    public void test4() {////        /**//         *       #The code will run//         *       ------------------////         contract A: 77045e71a7a2c50903d88e564cd72fab11e82051//         -----------////         a = 0x7f60c860005461012c6020540000000000000000000000000000000000000000//         b = 0x0060005460206000f20000000000000000000000000000000000000000000000//         create(100, 0 41)//////         contract B: (the contract to be created the addr will be defined to: 8e45367623a2865132d9bf875d5cfa31b9a0cd94)//         -----------//         a = 200//         b = 300////         */////        // Set contract into Database//        byte[] caller_addr_bytes = Hex.decode("cd2a3d9f938e13cd947ec05abc7fe734df8dd826");////        byte[] contractA_addr_bytes = Hex.decode("77045e71a7a2c50903d88e564cd72fab11e82051");////        byte[] codeA = Hex.decode("7f7f60c860005461012c602054000000000000" +//                "00000000000000000000000000006000547e60" +//                "005460206000f2000000000000000000000000" +//                "0000000000000000000000602054602960006064f0");////        ProgramInvokeMockImpl pi = new ProgramInvokeMockImpl();//        pi.setOwnerAddress(contractA_addr_bytes);////        Repository repository = pi.getRepository();////        repository.createAccount(contractA_addr_bytes);//        repository.saveCode(contractA_addr_bytes, codeA);////        repository.createAccount(caller_addr_bytes);////        // ****************** ////        //  Play the program  ////        // ****************** ////        VM vm = new VM();//        Program program = new Program(codeA, pi);////        try {//            while (!program.isStopped())//                vm.step(program);//        } catch (RuntimeException e) {//            program.setRuntimeFailure(e);//        }////        logger.info("============ Results ============");////        System.out.println("*** Used gas: " + program.getResult().getGasUsed());//        // TODO: check that the value pushed after exec is the new address//        repository.close();//    }////}