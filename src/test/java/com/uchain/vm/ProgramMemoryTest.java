package com.uchain.vm;import com.uchain.util.ByteUtil;import com.uchain.vm.program.Program;import com.uchain.vm.program.invoke.ProgramInvokeMockImpl;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;import java.nio.ByteBuffer;import static org.junit.Assert.assertEquals;import static org.junit.Assert.fail;public class ProgramMemoryTest {    ProgramInvokeMockImpl pi = new ProgramInvokeMockImpl();    Program program;    ByteBuffer memory;    @Before    public void createProgram() {        program = new Program(ByteUtil.EMPTY_BYTE_ARRAY, pi,Long.MAX_VALUE);    }    @Test    public void testGetMemSize() {        byte[] memory = new byte[64];        program.initMem(memory);        assertEquals(64, program.getMemSize());    }    @Test    @Ignore    public void testMemorySave() {        fail("Not yet implemented");    }    @Test    @Ignore    public void testMemoryLoad() {        fail("Not yet implemented");    }    @Test    public void testMemoryChunk1() {        program.initMem(new byte[64]);        int offset = 128;        int size = 32;        program.memoryChunk(offset, size);        assertEquals(160, program.getMemSize());    }    @Test // size 0 doesn't increase memory    public void testMemoryChunk2() {        program.initMem(new byte[64]);        int offset = 96;        int size = 0;        program.memoryChunk(offset, size);        System.out.println(program.getMemSize());        assertEquals(64, program.getMemSize());    }    @Test    public void testAllocateMemory1() {        program.initMem(new byte[64]);        int offset = 32;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(64, program.getMemSize());    }    @Test    public void testAllocateMemory2() {        program.initMem(new byte[64]);        int offset = 32;        int size = 64;        program.allocateMemory(offset, size);        assertEquals(96, program.getMemSize());    }    @Test    public void testAllocateMemory3() {        program.initMem(new byte[64]);        int offset = 0;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(64, program.getMemSize());    }    @Test    public void testAllocateMemory4() {        program.initMem(new byte[64]);        int offset = 0;        int size = 64;        program.allocateMemory(offset, size);        assertEquals(64, program.getMemSize());    }    @Test    public void testAllocateMemory5() {        program.initMem(new byte[64]);        int offset = 0;        int size = 0;        program.allocateMemory(offset, size);        assertEquals(64, program.getMemSize());    }    @Test    public void testAllocateMemory6() {        program.initMem(new byte[64]);        int offset = 64;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(96, program.getMemSize());    }    @Test    public void testAllocateMemory7() {        program.initMem(new byte[64]);        int offset = 96;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(128, program.getMemSize());    }    @Test    public void testAllocateMemory8() {        program.initMem(new byte[64]);        int offset = 0;        int size = 96;        program.allocateMemory(offset, size);        assertEquals(96, program.getMemSize());    }    @Test    public void testAllocateMemory9() {        program.initMem(new byte[64]);        int offset = 96;        int size = 0;        program.allocateMemory(offset, size);        assertEquals(64, program.getMemSize());    }    /************************************************/    @Test    public void testAllocateMemory10() {        int offset = 32;        int size = 0;        program.allocateMemory(offset, size);        assertEquals(0, program.getMemSize());    }    @Test    public void testAllocateMemory11() {        int offset = 0;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(32, program.getMemSize());    }    @Test    public void testAllocateMemory12() {        program.initMem(new byte[64]);        int offset = 64;        int size = 96;        program.allocateMemory(offset, size);        assertEquals(160, program.getMemSize());    }    @Test    public void testAllocateMemory13() {        program.initMem(new byte[64]);        int offset = 32;        int size = 128;        program.allocateMemory(offset, size);        assertEquals(160, program.getMemSize());    }    @Test    public void testAllocateMemory14() {        program.initMem(new byte[64]);        int offset = 96;        int size = 64;        program.allocateMemory(offset, size);        assertEquals(160, program.getMemSize());    }    @Test    public void testAllocateMemory15() {        program.initMem(new byte[64]);        int offset = 64;        int size = 96;        program.allocateMemory(offset, size);        assertEquals(160, program.getMemSize());    }    @Test    public void testAllocateMemory16() {        program.initMem(new byte[64]);        int offset = 64;        int size = 64;        program.allocateMemory(offset, size);        assertEquals(128, program.getMemSize());    }    @Test    public void testAllocateMemory17() {        program.initMem(new byte[96]);        int offset = 32;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(96, program.getMemSize());    }    @Test    public void testAllocateMemoryUnrounded1() {        program.initMem(new byte[64]);        int offset = 64;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(96, program.getMemSize());    }    @Test    public void testAllocateMemoryUnrounded2() {        program.initMem(new byte[64]);        int offset = 16;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(64, program.getMemSize());    }    @Test    public void testAllocateMemoryUnrounded3() {        program.initMem(new byte[64]);        int offset = 64;        int size = 16;        program.allocateMemory(offset, size);        assertEquals(96, program.getMemSize());    }    @Test    public void testAllocateMemoryUnrounded4() {        program.initMem(new byte[64]);        int offset = 16;        int size = 32;        program.allocateMemory(offset, size);        assertEquals(64, program.getMemSize());    }    @Test    public void testAllocateMemoryUnrounded5() {        program.initMem(new byte[64]);        int offset = 32;        int size = 16;        program.allocateMemory(offset, size);        assertEquals(64, program.getMemSize());    }    @Test    public void testAllocateMemoryUnrounded6() {        program.initMem(new byte[32]);        int offset = 16;        int size = 16;        program.allocateMemory(offset, size);        assertEquals(32, program.getMemSize());    }    @Test    public void testEmptyInsert() {        int offset = 32;        int size = 0;        program.memorySave(offset, size, new byte[] {0x01});        assertEquals(0, program.getMemSize());    }}