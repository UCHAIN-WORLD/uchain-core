package com.uchain.uvm;import com.uchain.core.*;import com.uchain.cryptohash.*;import com.uchain.main.Settings;import com.uchain.util.ByteUtil;import com.uchain.uvm.repository.RepositoryWrapper;import org.junit.Test;import java.math.BigDecimal;import java.text.ParseException;import java.util.ArrayList;import static com.uchain.util.TypeConverter.hexToByteArray;public class VMSosidity {    @Test    public void test(){        Settings settings = null;        try {            settings = new Settings("src/main/resources/config.properties");        } catch (ParseException e) {            e.printStackTrace();        }        NotificationOnBlock notificationOnBlock = null;//this::onBlock;        NotificationOnTransaction notificationOnTransaction = null;//this::onTransaction;        BlockChain chain = LevelDBBlockChainBuilder.populate(settings, notificationOnBlock, notificationOnTransaction, null);        Repository repository = new RepositoryWrapper(chain);        PrivateKey privkey = PrivateKey.fromWIF("d0516efaa6aa8c10f046b0210c599f619fe165679567e1a91b701ad76f84095c");        byte[] dataBytes = hexToByteArray("0x6060604052341561000f57600080fd5b6101f08061001e6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632c04477914610067578063457094cc146100bc5780634e70b1dc146100d157806360fe47b1146100fa575b600080fd5b341561007257600080fd5b61007a61011d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100c757600080fd5b6100cf610125565b005b34156100dc57600080fd5b6100e461018f565b6040518082815260200191505060405180910390f35b341561010557600080fd5b61011b6004808035906020019091905050610195565b005b600033905090565b7f05c766d1c5ea6f40afc38cd8e27308c236c492fbcfa32b458d2755cf76ec1e216040518080602001828103825260048152602001807f666972650000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a1565b60005481565b80600081905550612222600102611111604051808260010260001916815260200191505060405180910390a1505600a165627a7a723058208bc7328e45955dcaec20f986d7cd700926db2fd6cf6f2c4c44f14f997fc371870029");        String assetId = "0000000000000000000000000000000000000000000000000000000000000000";        UInt160 toPubKeyHash = UInt160.fromBytes(ByteUtil.ZERO_BYTE_ARRAY_OF_LENGTH20);        Transaction tx = new Transaction(TransactionType.Contract, privkey.publicKey().pubKeyHash(), toPubKeyHash,"",                Fixed8.fromDecimal(BigDecimal.ZERO), UInt256.fromBytes(CryptoUtil.binaryData2array(CryptoUtil.fromHexString(assetId))) ,0L, new BinaryData(CryptoUtil.byteToList(dataBytes)),                new BinaryData(new ArrayList<>()), 0x01, null);            tx.sign(privkey);        if (tx.verifySignature()) {            try {                ContractApplication.createCallTxAndExecute(tx, chain, repository);            } catch (Exception e) {                e.printStackTrace();            }        }    }}