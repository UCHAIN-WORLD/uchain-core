//package com.uchain.vm;////import com.uchain.vm.program.Program;//import org.junit.Test;//import org.spongycastle.util.encoders.Hex;////import static com.uchain.util.ByteUtil.oneByteToHexString;//import static org.junit.Assert.assertEquals;//import static org.junit.Assert.assertNotEquals;//import static org.junit.Assert.assertTrue;////public class VMMemoryOpTest extends VMBaseOpTest{//    @Test  // PUSH1 OP//    public void testPUSH1() {//        VM vm = new VM();//        program = new Program(compile("PUSH1 0xa0"), invoke);//        String expected = "00000000000000000000000000000000000000000000000000000000000000A0";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH2 OP//    public void testPUSH2() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0xa0b0"), invoke);//        String expected = "000000000000000000000000000000000000000000000000000000000000A0B0";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH3 OP//    public void testPUSH3() {//        VM vm = new VM();//        program = new Program(compile("PUSH3 0xA0B0C0"), invoke);//        String expected = "0000000000000000000000000000000000000000000000000000000000A0B0C0";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH4 OP//    public void testPUSH4() {//        VM vm = new VM();//        program = new Program(compile("PUSH4 0xA0B0C0D0"), invoke);//        String expected = "00000000000000000000000000000000000000000000000000000000A0B0C0D0";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH5 OP//    public void testPUSH5() {//        VM vm = new VM();//        program = new Program(compile("PUSH5 0xA0B0C0D0E0"), invoke);//        String expected = "000000000000000000000000000000000000000000000000000000A0B0C0D0E0";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH6 OP//    public void testPUSH6() {//        VM vm = new VM();//        program = new Program(compile("PUSH6 0xA0B0C0D0E0F0"), invoke);//        String expected = "0000000000000000000000000000000000000000000000000000A0B0C0D0E0F0";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH7 OP//    public void testPUSH7() {//        VM vm = new VM();//        program = new Program(compile("PUSH7 0xA0B0C0D0E0F0A1"), invoke);//        String expected = "00000000000000000000000000000000000000000000000000A0B0C0D0E0F0A1";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH8 OP//    public void testPUSH8() {//        VM vm = new VM();//        program = new Program(compile("PUSH8 0xA0B0C0D0E0F0A1B1"), invoke);//        String expected = "000000000000000000000000000000000000000000000000A0B0C0D0E0F0A1B1";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH9 OP//    public void testPUSH9() {//        VM vm = new VM();//        program = new Program(compile("PUSH9 0xA0B0C0D0E0F0A1B1C1"), invoke);//        String expected = "0000000000000000000000000000000000000000000000A0B0C0D0E0F0A1B1C1";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH10 OP//    public void testPUSH10() {//        VM vm = new VM();//        program = new Program(compile("PUSH10 0xA0B0C0D0E0F0A1B1C1D1"), invoke);//        String expected = "00000000000000000000000000000000000000000000A0B0C0D0E0F0A1B1C1D1";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH11 OP//    public void testPUSH11() {//        VM vm = new VM();//        program = new Program(compile("PUSH11 0xA0B0C0D0E0F0A1B1C1D1E1"), invoke);//        String expected = "000000000000000000000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH12 OP//    public void testPUSH12() {//        VM vm = new VM();//        program = new Program(compile("PUSH12 0xA0B0C0D0E0F0A1B1C1D1E1F1"), invoke);//        String expected = "0000000000000000000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }//    @Test  // PUSH13 OP//    public void testPUSH13() {//        VM vm = new VM();//        program = new Program(compile("PUSH13 0xA0B0C0D0E0F0A1B1C1D1E1F1A2"), invoke);//        String expected = "00000000000000000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH14 OP//    public void testPUSH14() {//        VM vm = new VM();//        program = new Program(compile("PUSH14 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2"), invoke);//        String expected = "000000000000000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH15 OP//    public void testPUSH15() {//        VM vm = new VM();//        program = new Program(compile("PUSH15 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2"), invoke);//        String expected = "0000000000000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH16 OP//    public void testPUSH16() {//        VM vm = new VM();//        program = new Program(compile("PUSH16 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2"), invoke);//        String expected = "00000000000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH17 OP//    public void testPUSH17() {//        VM vm = new VM();//        program = new Program(compile("PUSH17 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2"), invoke);//        String expected = "000000000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH18 OP//    public void testPUSH18() {//        VM vm = new VM();//        program = new Program(compile("PUSH18 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2"), invoke);//        String expected = "0000000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH19 OP//    public void testPUSH19() {//        VM vm = new VM();//        program = new Program(compile("PUSH19 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3"), invoke);//        String expected = "00000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH20 OP//    public void testPUSH20() {//        VM vm = new VM();//        program = new Program(compile("PUSH20 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3"), invoke);//        String expected = "000000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH21 OP//    public void testPUSH21() {//        VM vm = new VM();//        program = new Program(compile("PUSH21 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3"), invoke);//        String expected = "0000000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH22 OP//    public void testPUSH22() {//        VM vm = new VM();//        program = new Program(compile("PUSH22 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3"), invoke);//        String expected = "00000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH23 OP//    public void testPUSH23() {//        VM vm = new VM();//        program = new Program(compile("PUSH23 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3"), invoke);//        String expected = "000000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH24 OP//    public void testPUSH24() {//        VM vm = new VM();//        program = new Program(compile("PUSH24 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3"), invoke);//        String expected = "0000000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH25 OP//    public void testPUSH25() {//        VM vm = new VM();//        program = new Program(compile("PUSH25 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4"), invoke);//        String expected = "00000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH26 OP//    public void testPUSH26() {//        VM vm = new VM();//        program = new Program(compile("PUSH26 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4"), invoke);//        String expected = "000000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH27 OP//    public void testPUSH27() {//        VM vm = new VM();//        program = new Program(compile("PUSH27 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4"), invoke);//        String expected = "0000000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH28 OP//    public void testPUSH28() {//        VM vm = new VM();//        program = new Program(compile("PUSH28 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4"), invoke);//        String expected = "00000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH29 OP//    public void testPUSH29() {//        VM vm = new VM();//        program = new Program(compile("PUSH29 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4E4"), invoke);//        String expected = "000000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4E4";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH30 OP//    public void testPUSH30() {//        VM vm = new VM();//        program = new Program(compile("PUSH30 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4E4F4"), invoke);//        String expected = "0000A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4E4F4";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH31 OP//    public void testPUSH31() {//        VM vm = new VM();//        program = new Program(compile("PUSH31 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4E4F4A1"), invoke);//        String expected = "00A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4E4F4A1";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test  // PUSH32 OP//    public void testPUSH32() {//        VM vm = new VM();//        program = new Program(compile("PUSH32 0xA0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4E4F4A1B1"), invoke);//        String expected = "A0B0C0D0E0F0A1B1C1D1E1F1A2B2C2D2E2F2A3B3C3D3E3F3A4B4C4D4E4F4A1B1";//        program.fullTrace();//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test // PUSHN OP not enough data//    public void testPUSHN_1() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0xAA"), invoke);//        String expected = "000000000000000000000000000000000000000000000000000000000000AA00";//        program.fullTrace();//        vm.step(program);//        assertTrue(program.isStopped());//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test // PUSHN OP not enough data//    public void testPUSHN_2() {//        VM vm = new VM();//        program = new Program(compile("PUSH32 0xAABB"), invoke);//        String expected = "AABB000000000000000000000000000000000000000000000000000000000000";//        program.fullTrace();//        vm.step(program);//        assertTrue(program.isStopped());//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test // POP OP//    public void testPOP_1() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0x0000 PUSH1 0x01 PUSH3 0x000002 POP"), invoke);//        String expected = "0000000000000000000000000000000000000000000000000000000000000001";//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test // POP OP//    public void testPOP_2() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0x0000 PUSH1 0x01 PUSH3 0x000002 POP POP"), invoke);//        String expected = "0000000000000000000000000000000000000000000000000000000000000000";//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test(expected = Program.StackTooSmallException.class)  // POP OP mal data//    public void testPOP_3() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0x0000 PUSH1 0x01 PUSH3 0x000002 POP POP POP POP"), invoke);//        try {//            vm.step(program);//            vm.step(program);//            vm.step(program);//            vm.step(program);//            vm.step(program);//            vm.step(program);//            vm.step(program);//        } finally {//            assertTrue(program.isStopped());//        }//    }////    @Test // DUP1...DUP16 OP//    public void testDUPS() {//        for (int i = 1; i < 17; i++) {//            testDUPN_1(i);//        }//    }////    private void testDUPN_1(int n) {//        VM vm = new VM();//        String programCode = "";//        for (int i = 0; i < n; i++) {//            programCode += "PUSH1 0x" + (12 + i) + " ";//        }////        programCode += "DUP" + n;//        program = new Program(compile(programCode), invoke);//        String expected = "0000000000000000000000000000000000000000000000000000000000000012";//        int expectedLen = n + 1;////        for (int i = 0; i < expectedLen; i++) {//            vm.step(program);//        }////        assertEquals(expectedLen, program.getStack().toArray().length);//        assertEquals(expected, Hex.toHexString(program.stackPop().getData()).toUpperCase());//        for (int i = 0; i < expectedLen - 2; i++) {//            assertNotEquals(expected, Hex.toHexString(program.stackPop().getData()).toUpperCase());//        }//        assertEquals(expected, Hex.toHexString(program.stackPop().getData()).toUpperCase());//    }////    @Test(expected = Program.StackTooSmallException.class)  // DUPN OP mal data//    public void testDUPN_2() {//        VM vm = new VM();//        program = new Program(compile("DUP1"), invoke);//        try {//            vm.step(program);//        } finally {//            assertTrue(program.isStopped());//        }//    }////    @Test // SWAP1...SWAP16 OP//    public void testSWAPS() {//        for (int i = 1; i < 17; ++i) {//            testSWAPN_1(i);//        }//    }////    private void testSWAPN_1(int n) {//        VM vm = new VM();//        String programCode = "";//        String top = DataWord.of(0x10 + n).toString();//        for (int i = n; i > -1; --i) {//            programCode += "PUSH1 0x" + oneByteToHexString((byte) (0x10 + i)) + " ";//        }//        programCode += "SWAP" + n;//        program = new Program(compile(programCode), invoke);//        for (int i = 0; i < n + 2; ++i) {//            vm.step(program);//        }//        assertEquals(n + 1, program.getStack().toArray().length);//        assertEquals(top, Hex.toHexString(program.stackPop().getData()));//    }////    @Test(expected = Program.StackTooSmallException.class)  // SWAPN OP mal data//    public void testSWAPN_2() {//        VM vm = new VM();//        program = new Program(compile("SWAP1"), invoke);//        try {//            vm.step(program);//        } finally {//            assertTrue(program.isStopped());//        }//    }////    @Test // MSTORE OP//    public void testMSTORE_1() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0x1234 PUSH1 0x00 MSTORE"), invoke);//        String expected = "0000000000000000000000000000000000000000000000000000000000001234";//        vm.step(program);//        vm.step(program);//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getMemory()));//    }////    @Test // MSTORE OP//    public void testMSTORE_2() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0x1234 PUSH1 0x00 MSTORE PUSH2 0x5566 PUSH1 0x20 MSTORE"), invoke);//        String expected = "0000000000000000000000000000000000000000000000000000000000001234" +//                "0000000000000000000000000000000000000000000000000000000000005566";//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);////        assertEquals(expected, Hex.toHexString(program.getMemory()));//    }////    @Test // MSTORE OP//    public void testMSTORE_3() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0x1234 PUSH1 0x00 MSTORE PUSH2 0x5566 PUSH1 0x20 MSTORE PUSH2 0x8888 PUSH1 0x00 MSTORE"), invoke);//        String expected = "0000000000000000000000000000000000000000000000000000000000008888" +//                "0000000000000000000000000000000000000000000000000000000000005566";//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getMemory()));//    }////    @Test // MSTORE OP//    public void testMSTORE_4() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0x1234 PUSH1 0xA0 MSTORE"), invoke);//        String expected = "" +//                "0000000000000000000000000000000000000000000000000000000000000000" +//                "0000000000000000000000000000000000000000000000000000000000000000" +//                "0000000000000000000000000000000000000000000000000000000000000000" +//                "0000000000000000000000000000000000000000000000000000000000000000" +//                "0000000000000000000000000000000000000000000000000000000000000000" +//                "0000000000000000000000000000000000000000000000000000000000001234";//        vm.step(program);//        vm.step(program);//        vm.step(program);//        assertEquals(expected, Hex.toHexString(program.getMemory()));//    }////    @Test(expected = Program.StackTooSmallException.class) // MSTORE OP//    public void testMSTORE_5() {//        VM vm = new VM();//        program = new Program(compile("PUSH2 0x1234 MSTORE"), invoke);//        try {//            vm.step(program);//            vm.step(program);//        } finally {//            assertTrue(program.isStopped());//        }//    }////    @Test // MLOAD OP//    public void testMLOAD_1() {//        VM vm = new VM();//        program = new Program(compile("PUSH1 0x00 MLOAD"), invoke);//        String m_expected = "0000000000000000000000000000000000000000000000000000000000000000";//        String s_expected = "0000000000000000000000000000000000000000000000000000000000000000";//        vm.step(program);//        vm.step(program);//        assertEquals(m_expected, Hex.toHexString(program.getMemory()));//        assertEquals(s_expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }////    @Test // MLOAD OP//    public void testMLOAD_2() {//        VM vm = new VM();//        program = new Program(compile("PUSH1 0x22 MLOAD"), invoke);//        String m_expected = "0000000000000000000000000000000000000000000000000000000000000000" +//                "0000000000000000000000000000000000000000000000000000000000000000" +//                "0000000000000000000000000000000000000000000000000000000000000000";//        String s_expected = "0000000000000000000000000000000000000000000000000000000000000000";//        vm.step(program);//        vm.step(program);//        assertEquals(m_expected, Hex.toHexString(program.getMemory()).toUpperCase());//        assertEquals(s_expected, Hex.toHexString(program.getStack().peek().getData()).toUpperCase());//    }//}