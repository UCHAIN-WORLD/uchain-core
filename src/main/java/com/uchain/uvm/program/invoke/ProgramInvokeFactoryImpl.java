package com.uchain.uvm.program.invoke;import com.uchain.core.block.Block;import com.uchain.core.transaction.Transaction;import com.uchain.core.datastore.BlockStore;import com.uchain.cryptohash.UInt160;import com.uchain.cryptohash.UInt256;import com.uchain.util.ByteUtil;import com.uchain.uvm.DataWord;import com.uchain.uvm.Repository;import com.uchain.uvm.program.Program;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.math.BigInteger;import static org.apache.commons.lang3.ArrayUtils.nullToEmpty;public class ProgramInvokeFactoryImpl implements ProgramInvokeFactory{    private static final Logger logger = LoggerFactory.getLogger("VM");/*    @Override    public ProgramInvoke createProgramInvoke(Transaction tx, Block block, Repository repository, Repository origRepository, BlockStore blockStore) {        return createProgramInvoke(tx,block,repository,origRepository,null,blockStore);    }*/    @Override    public ProgramInvoke createProgramInvoke(Transaction tx, Block block, Repository repository,                                             Repository origRepository, UInt160 newContractAddress, BlockStore blockStore) {        /***         ADDRESS op       ***/        // YP: Get address of currently executing account.        byte[] address = tx.isContractCreation() ? newContractAddress.getData() : tx.getReceiveAddress();        /***         ORIGIN op       ***/        // YP: This is the sender of original transaction; it is never a contract.        byte[] origin = tx.getSender();        /***         CALLER op       ***/        // YP: This is the address of the account that is directly responsible for this execution.        byte[] caller = tx.getSender();        /***         BALANCE op       ***/        byte[] balance = repository.getBalance(new UInt160(address), UInt256.assetId).toByteArray();        /***         GASPRICE op       ***/        byte[] gasPrice = tx.getGasPrice();        /*** GAS op ***/        byte[] gas = tx.getGasLimit();        /***        CALLVALUE op      ***/        byte[] callValue = nullToEmpty(tx.getValue().toByteArray());        /***     CALLDATALOAD  op   ***/        /***     CALLDATACOPY  op   ***/        /***     CALLDATASIZE  op   ***/        byte[] data = tx.isContractCreation() ? ByteUtil.EMPTY_BYTE_ARRAY : nullToEmpty(tx.getDatas());        /***    PREVHASH  op  ***/        byte[] lastHash = null;//block.getParentHash();        /***   COINBASE  op ***/        byte[] coinbase = null;//block.getCoinbase();        /*** TIMESTAMP  op  ***/        long timestamp = block.timeStamp();        /*** NUMBER  op  ***/        long number = block.height();        /*** DIFFICULTY  op  ***/        byte[] difficulty = null;//block.getDifficulty();        /*** GASLIMIT op ***/        byte[] gaslimit = ByteUtil.ZERO_BYTE_ARRAY;//block.getGasLimit();        if (logger.isInfoEnabled()) {            logger.info("Top level call: \n" +                            "tx.hash={}\n" +                            "address={}\n" +                            "origin={}\n" +                            "caller={}\n" +                            "balance={}\n" +                            "gasPrice={}\n" +                            "gas={}\n" +                            "callValue={}\n" +                            "data={}\n" +                            "lastHash={}\n" +                            "coinbase={}\n" +                            "timestamp={}\n" +                            "blockNumber={}\n" +                            "difficulty={}\n" +                            "gaslimit={}\n",//                    ByteUtil.toHexString(tx.getHash()),                    ByteUtil.toHexString(address),                    ByteUtil.toHexString(origin),                    ByteUtil.toHexString(caller),                    ByteUtil.bytesToBigInteger(balance),                    ByteUtil.bytesToBigInteger(gasPrice),                    ByteUtil.bytesToBigInteger(gas),                    ByteUtil.bytesToBigInteger(callValue),                    ByteUtil.toHexString(data),                    ByteUtil.toHexString(lastHash),                    ByteUtil.toHexString(coinbase),                    timestamp,                    number,                    ByteUtil.toHexString(difficulty),                    gaslimit);        }        return new ProgramInvokeImpl(address, origin, caller, balance, gasPrice, gas, callValue, data,                lastHash, coinbase, timestamp, number, difficulty, gaslimit,                repository, origRepository, blockStore);    }////    @Override//    public ProgramInvoke createProgramInvoke(Transaction tx, Block block,//                                             AccountStore accountStore, BlockStore blockStore) {////        byte[] address = tx.isContractCreation() ? tx.getContractAddress().getData() : tx.getReceiveAddress();////        /***         ORIGIN op       ***///        // YP: This is the sender of original transaction; it is never a contract.//        byte[] origin = tx.getSender();////        /***         CALLER op       ***///        // YP: This is the address of the account that is directly responsible for this execution.//        byte[] caller = tx.getSender();////        /***         BALANCE op       ***///        byte[] balance = accountStore.get(tx.fromPubKeyHash()) == null ?//        ByteUtil.ZERO_BYTE_ARRAY: ByteUtil.longToBytes(accountStore.get(tx.fromPubKeyHash()).getBalance(tx.getAssetId()).getValue());////        /***         GASPRICE op       ***///        byte[] gasPrice = null;//tx.getGasPrice();////        /*** GAS op ***///        byte[] gas = null;//tx.getGasLimit();////        /***        CALLVALUE op      ***///        byte[] callValue = nullToEmpty(tx.getValue().toByteArray());////        /***     CALLDATALOAD  op   ***///        /***     CALLDATACOPY  op   ***///        /***     CALLDATASIZE  op   ***///        byte[] data = tx.isContractCreation() ? ByteUtil.EMPTY_BYTE_ARRAY : nullToEmpty(tx.getDatas());////        /***    PREVHASH  op  ***///        byte[] lastHash = null;//block.getParentHash();////        /***   COINBASE  op ***///        byte[] coinbase = null;//block.getCoinbase();////        /*** TIMESTAMP  op  ***///        long timestamp = block.timeStamp();////        /*** NUMBER  op  ***///        long number = block.height();////        /*** DIFFICULTY  op  ***///        byte[] difficulty = null;//block.getDifficulty();////        /*** GASLIMIT op ***///        byte[] gaslimit = null;//block.getGasLimit();////        if (logger.isInfoEnabled()) {//            logger.info("Top level call: \n" +//                            "tx.hash={}\n" +//                            "address={}\n" +//                            "origin={}\n" +//                            "caller={}\n" +//                            "balance={}\n" +//                            "gasPrice={}\n" +//                            "gas={}\n" +//                            "callValue={}\n" +//                            "data={}\n" +//                            "lastHash={}\n" +//                            "coinbase={}\n" +//                            "timestamp={}\n" +//                            "blockNumber={}\n" +//                            "difficulty={}\n" +//                            "gaslimit={}\n",//////                    ByteUtil.toHexString(tx.getHash()),//                    ByteUtil.toHexString(address),//                    ByteUtil.toHexString(origin),//                    ByteUtil.toHexString(caller),//                    ByteUtil.bytesToBigInteger(balance),//                    ByteUtil.bytesToBigInteger(gasPrice),//                    ByteUtil.bytesToBigInteger(gas),//                    ByteUtil.bytesToBigInteger(callValue),//                    ByteUtil.toHexString(data),//                    ByteUtil.toHexString(lastHash),//                    ByteUtil.toHexString(coinbase),//                    timestamp,//                    number,//                    ByteUtil.toHexString(difficulty),//                    gaslimit);//        }////        return new ProgramInvokeImpl(address, origin, caller, balance, gasPrice, gas, callValue, data,//                lastHash, coinbase, timestamp, number, difficulty, gaslimit, blockStore);//    }    @Override    public ProgramInvoke createProgramInvoke(Program program, DataWord toAddress, DataWord callerAddress,                                             DataWord inValue, DataWord inGas,                                             BigInteger balanceInt, byte[] dataIn,                                             Repository repository, Repository origRepository, BlockStore blockStore,                                             boolean isStaticCall, boolean byTestingSuite) {        DataWord address = toAddress;        DataWord origin = program.getOriginAddress();        DataWord caller = callerAddress;        DataWord balance = DataWord.of(balanceInt.toByteArray());        DataWord gasPrice = program.getGasPrice();        DataWord gas = inGas;        DataWord callValue = inValue;        byte[] data = dataIn;        DataWord lastHash = program.getPrevHash();        DataWord coinbase = program.getCoinbase();        DataWord timestamp = program.getTimestamp();        DataWord number = program.getNumber();        DataWord difficulty = program.getDifficulty();        DataWord gasLimit = program.getGasLimit();        if (logger.isInfoEnabled()) {            logger.info("Internal call: \n" +                            "address={}\n" +                            "origin={}\n" +                            "caller={}\n" +                            "balance={}\n" +                            "gasPrice={}\n" +                            "gas={}\n" +                            "callValue={}\n" +                            "data={}\n" +                            "lastHash={}\n" +                            "coinbase={}\n" +                            "timestamp={}\n" +                            "blockNumber={}\n" +                            "difficulty={}\n" +                            "gaslimit={}\n",                    ByteUtil.toHexString(address.getLast20Bytes()),                    ByteUtil.toHexString(origin.getLast20Bytes()),                    ByteUtil.toHexString(caller.getLast20Bytes()),                    balance.toString(),                    gasPrice.longValue(),                    gas.longValue(),                    ByteUtil.toHexString(callValue.getNoLeadZeroesData()),                    ByteUtil.toHexString(data),                    ByteUtil.toHexString(lastHash.getData()),                    ByteUtil.toHexString(coinbase.getLast20Bytes()),                    timestamp.longValue(),                    number.longValue(),                    ByteUtil.toHexString(difficulty.getNoLeadZeroesData()),                    gasLimit.bigIntValue());        }        return new ProgramInvokeImpl(address, origin, caller, balance, gasPrice, gas, callValue,                data, lastHash, coinbase, timestamp, number, difficulty, gasLimit,                repository, origRepository, program.getCallDeep() + 1, blockStore, isStaticCall, byTestingSuite);    }}