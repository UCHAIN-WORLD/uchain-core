package com.uchain.networkmanager.message;import com.google.common.collect.Lists;import com.uchain.common.Serializable;import com.uchain.common.Serializabler;import com.uchain.core.Transaction;import lombok.AllArgsConstructor;import lombok.Getter;import lombok.Setter;import java.io.ByteArrayInputStream;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.IOException;import java.util.List;@Getter@Setter@AllArgsConstructorpublic class TransactionsPayload implements Serializable {    private List<Transaction> txs;    @Override    public void serialize(DataOutputStream os) {        Serializabler.writeSeq(os, txs);    }    public static List<Transaction> readSeq(DataInputStream is) {        List<Transaction> transactions = Lists.newArrayList();        try {            int size = is.readInt();            for(int i = 0; i < size; i++){                transactions.add(Transaction.deserialize(is));            }        } catch (IOException e) {            e.printStackTrace();        }        return transactions;    }    private static TransactionsPayload deserialize(DataInputStream is) {        List<Transaction> txs = readSeq(is);        return new TransactionsPayload(txs);    }    public static TransactionsPayload fromBytes(byte[] data) {        ByteArrayInputStream bs = new ByteArrayInputStream(data);        DataInputStream is = new DataInputStream(bs);        return deserialize(is);    }}