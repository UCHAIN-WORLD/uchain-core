package com.uchain.network.message;import com.google.common.collect.Lists;import com.uchain.common.Serializable;import com.uchain.core.Block;import lombok.AllArgsConstructor;import lombok.Getter;import lombok.Setter;import java.io.ByteArrayInputStream;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.IOException;import java.util.List;@Getter@Setter@AllArgsConstructorpublic class BlocksPayload implements Serializable {    private List<Block> blocks;    @Override    public void serialize(DataOutputStream os) {        try {            os.writeInt(blocks.size());        } catch (IOException e) {            e.printStackTrace();        }        blocks.forEach(block -> block.serialize(os));    }    public static List<Block> readSeq(DataInputStream is) {        List<Block> blocks = Lists.newArrayList();        try {            int size = is.readInt();            for(int i = 0; i < size; i++){                blocks.add(Block.deserialize(is));            }        } catch (IOException e) {            e.printStackTrace();        }        return blocks;    }    private static BlocksPayload deserialize(DataInputStream is) {         List<Block> blocks = readSeq(is);        return new BlocksPayload(blocks);    }    public static BlocksPayload fromBytes(byte[] data) {        ByteArrayInputStream bs = new ByteArrayInputStream(data);        DataInputStream is = new DataInputStream(bs);        return deserialize(is);    }}