package com.uchain.vm.trace;import com.uchain.main.SystemProperties;import com.uchain.vm.DataWord;import com.uchain.vm.OpCode;import com.uchain.vm.program.invoke.ProgramInvoke;import org.spongycastle.util.encoders.Hex;import lombok.Getter;import lombok.Setter;import java.util.ArrayList;import java.util.List;import static com.uchain.util.ByteUtil.toHexString;import static com.uchain.vm.trace.Serializers.serializeFieldsOnly;import static java.lang.String.format;@Getter@Setterpublic class ProgramTrace {    private List<Op> ops = new ArrayList<>();    private String result;    private String error;    private String contractAddress;    public ProgramTrace() {        this(null, null);    }    public ProgramTrace(SystemProperties config, ProgramInvoke programInvoke) {        if (programInvoke != null && config.isVmTrace()) {            contractAddress = Hex.toHexString(programInvoke.getOwnerAddress().getData());        }    }    public ProgramTrace(ProgramInvoke programInvoke) {        if (programInvoke != null) {            contractAddress = Hex.toHexString(programInvoke.getOwnerAddress().getData());        }    }    public ProgramTrace result(byte[] result) {        setResult(toHexString(result));        return this;    }    public ProgramTrace error(Exception error) {        setError(error == null ? "" : format("%s: %s", error.getClass(), error.getMessage()));        return this;    }    public Op addOp(byte code, int pc, int deep, DataWord gas, OpActions actions) {        Op op = new Op();        op.setActions(actions);        op.setCode(OpCode.code(code));        op.setDeep(deep);        op.setGas(gas.value());        op.setPc(pc);        ops.add(op);        return op;    }    //用于合并子调用执行    public void merge(ProgramTrace programTrace) {        this.ops.addAll(programTrace.ops);    }    public String asJsonString(boolean formatted) {        return serializeFieldsOnly(this, formatted);    }    @Override    public String toString() {        return asJsonString(true);    }}