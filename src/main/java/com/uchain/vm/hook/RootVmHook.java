package com.uchain.vm.hook;import com.uchain.vm.OpCode;import com.uchain.vm.program.Program;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Primary;import org.springframework.stereotype.Component;import java.util.Arrays;import java.util.Optional;import java.util.function.Consumer;@Primary@Componentpublic class RootVmHook implements VMHook{    private static final Logger logger = LoggerFactory.getLogger("VM");    private VMHook[] hooks;    @Autowired    public RootVmHook(Optional<VMHook[]> hooks) {        this.hooks = hooks.orElseGet(() -> new VMHook[] {});    }    private void proxySafeToAll(Consumer<VMHook> action) {        for (VMHook hook : hooks) {            if (hook.isEmpty()) continue;            try {                action.accept(hook);            } catch (Throwable t) {                logger.error("VM hook execution error: ", t);            }        }    }    @Override    public void startPlay(Program program) {        proxySafeToAll(hook -> hook.startPlay(program));    }    @Override    public void step(Program program, OpCode opcode) {        proxySafeToAll(hook -> hook.step(program, opcode));    }    @Override    public void stopPlay(Program program) {        proxySafeToAll(hook -> hook.stopPlay(program));    }    @Override    public boolean isEmpty() {        return hooks.length == 0 || emptyHooksCount() == hooks.length;    }    private long emptyHooksCount() {        return Arrays.stream(hooks).filter(VMHook::isEmpty).count();    }}